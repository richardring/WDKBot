# This workflow will build a docker container, publish it to Google Artifact Registry, and deploy it to GKE

on:
  workflow_call:
    inputs:
      env:
        required: true
        type: string
      GKE_CLUSTER:
        required: true
        type: string
      GKE_ZONE:
        required: true
        type: string
      REPOSITORY:
        required: true
        type: string
      GAR_LOCATION:
        required: true
        type: string
    secrets:
      RSA_PRIVATE_KEY:
        required: true
      GKE_PROJECT:
        required: true
      GKE_SA_KEY:
        required: true

jobs:

  gke:
    name: Google Cloud
    runs-on: ubuntu-latest
    environment: ${{ inputs.env }}

    env:
      PROJECT_ID: ${{ secrets.GKE_PROJECT }}
      GKE_CLUSTER: ${{ inputs.GKE_CLUSTER }}
      GKE_ZONE: ${{ inputs.GKE_ZONE }}
      DEPLOYMENT_NAME: bot-customer-blast
      GAR_LOCATION: ${{ inputs.GAR_LOCATION }}
      REPOSITORY: ${{ inputs.REPOSITORY }}
      IMAGE: bot-customer-blast
      RSA_SECRET_FILE_NAME: privatekey.pem
      RSA_SECRET_VALUE: ${{ secrets.RSA_PRIVATE_KEY }}

    steps:

      # Checkout code
      - name: Checkout
        uses: actions/checkout@v2

      # Setup gcloud CLI
      - uses: google-github-actions/setup-gcloud@v0.2.0
        with:
          service_account_key: ${{ secrets.GKE_SA_KEY }}
          project_id: ${{ secrets.GKE_PROJECT }}

      # Configure Docker to use the gcloud command-line tool as a credential
      # helper for authentication
      - run: |-
          gcloud --quiet auth configure-docker
          gcloud --quiet auth configure-docker $GAR_LOCATION-docker.pkg.dev

      # Get the GKE credentials so that we can deploy to the cluster
      - uses: google-github-actions/get-gke-credentials@v0.2.1
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_ZONE }}
          credentials: ${{ secrets.GKE_SA_KEY }}

      # Package application
      - name: Package
        run: |-
          mvn clean package spring-boot:repackage -DskipTests

      # Build the Docker image
      - name: Build
        run: |-
          docker build \
            --tag "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA" \
            --build-arg GITHUB_SHA="$GITHUB_SHA" \
            --build-arg GITHUB_REF="$GITHUB_REF" \
            .

      # Push the Docker image to Google Artifact Registry
      - name: Publish
        run: |-
          docker push "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA"

      # Set up kustomize
      - name: Set up Kustomize
        run: |-
          curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
          chmod u+x ./kustomize

      # Deploy the Docker image to the GKE cluster
      - name: Deploy
        run: |-
          echo $RSA_SECRET_VALUE | sed 's/ /\n/g;s/\nRSA\nPRIVATE\nKEY/ RSA PRIVATE KEY/g' > k8s/dev/$RSA_SECRET_FILE_NAME
          wc -l k8s/dev/$RSA_SECRET_FILE_NAME
          (cd k8s/dev && ../../kustomize edit set image LOCATION-docker.pkg.dev/PROJECT_ID/REPOSITORY/IMAGE:TAG=$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA)
          ./kustomize build k8s/dev | kubectl apply -f -